name: Auto Tag & Deploy on Version Change

on:
  push:
    branches: [ main ]

jobs:
  detect-tag-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # n√©cessaire pour pousser des tags

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üß∞ Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: üîß Configure git (utilise le PAT pour que les tags d√©clenchent les autres workflows)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin \
            https://x-access-token:${{ secrets.PAT_WORKFLOW }}@github.com/${{ github.repository }}.git

      - name: üîç Get previous commit (fallback sur HEAD si premier commit)
        id: prev
        run: |
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "sha=$(git rev-parse HEAD~1)" >> $GITHUB_OUTPUT
          else
            echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: üì¶ Check client version
        id: client
        shell: bash
        run: |
          if [ -f client/package.json ]; then
            old_json="$(git show ${{ steps.prev.outputs.sha }}:client/package.json 2>/dev/null || true)"
            if [ -n "$old_json" ]; then OLD_VERSION="$(echo "$old_json" | jq -r .version)"; else OLD_VERSION=""; fi
            NEW_VERSION="$(jq -r .version client/package.json)"
            echo "changed=$([ "$OLD_VERSION" != "$NEW_VERSION" ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: üì¶ Check backend version
        id: backend
        shell: bash
        run: |
          if [ -f server/package.json ]; then
            old_json="$(git show ${{ steps.prev.outputs.sha }}:server/package.json 2>/dev/null || true)"
            if [ -n "$old_json" ]; then OLD_VERSION="$(echo "$old_json" | jq -r .version)"; else OLD_VERSION=""; fi
            NEW_VERSION="$(jq -r .version server/package.json)"
            echo "changed=$([ "$OLD_VERSION" != "$NEW_VERSION" ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: üè∑ Tag Client (si version a chang√©)
        id: tag_client
        if: steps.client.outputs.changed == 'true'
        shell: bash
        run: |
          TAG="client/${{ steps.client.outputs.version }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Tag $TAG existe d√©j√†, on ne le recr√©e pas."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi

      - name: üè∑ Tag Backend (si version a chang√©)
        id: tag_backend
        if: steps.backend.outputs.changed == 'true'
        shell: bash
        run: |
          TAG="backend/${{ steps.backend.outputs.version }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Tag $TAG existe d√©j√†, on ne le recr√©e pas."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi

      # Dispatch APR√àS cr√©ation/pouss√©e des tags
      - name: ‚ñ∂Ô∏è Dispatch Frontend Deploy
        if: steps.client.outputs.changed == 'true'
        run: |
          curl -sSL -X POST \
            -H "Authorization: token ${{ secrets.PAT_WORKFLOW }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"deploy-frontend","client_payload":{"version":"'"${{ steps.client.outputs.version }}"'","tag":"'"${{ steps.tag_client.outputs.tag }}"'"}}'

      - name: ‚ñ∂Ô∏è Dispatch Backend Deploy
        if: steps.backend.outputs.changed == 'true'
        run: |
          curl -sSL -X POST \
            -H "Authorization: token ${{ secrets.PAT_WORKFLOW }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"deploy-backend","client_payload":{"version":"'"${{ steps.backend.outputs.version }}"'","tag":"'"${{ steps.tag_backend.outputs.tag }}"'"}}'
